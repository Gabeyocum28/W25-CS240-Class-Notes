#!/usr/bin/env python3
"""
Complete demo of the migration workflow with classification sets
"""

import sys
import os
# Add the project root to the path (two levels up from tests/integration/)
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from fulcrum_processor import AdvancedFulcrumProcessor

def demo_complete_migration():
    """Demo the complete migration workflow including classification"""
    processor = AdvancedFulcrumProcessor()
    
    if not processor.api_client:
        print("‚ùå API credentials not found")
        return
    
    print("üé¨ COMPLETE MIGRATION WORKFLOW DEMO")
    print("=" * 60)
    print("This shows the full end-to-end process:")
    print("1. ‚úÖ Export data from source form ‚Üí CSV + photos")
    print("2. ‚úÖ Select target form (Liberty Military Housing)")  
    print("3. ‚úÖ Extract target form template")
    print("4. ‚úÖ Map fields between source and target")
    print("5. ‚úÖ Search classification sets for districtproperty")
    print("6. ‚úÖ Generate migrated CSV with proper districtproperty")
    print("=" * 60)
    
    try:
        # Step 1: Find Liberty Military Housing forms
        print(f"\n1Ô∏è‚É£ FINDING TARGET FORMS")
        print("-" * 40)
        
        all_forms = processor.api_client.get_forms('all')
        liberty_forms = [f for f in all_forms if 'liberty' in f.get('name', '').lower() and 'military' in f.get('name', '').lower()]
        
        if liberty_forms:
            print(f"‚úÖ Found {len(liberty_forms)} Liberty Military Housing forms")
            target_form = liberty_forms[0]
            print(f"   Target: {target_form.get('name')}")
        else:
            print("‚ùå No Liberty Military Housing forms found")
            return
        
        # Step 2: Get template
        print(f"\n2Ô∏è‚É£ EXTRACTING FORM TEMPLATE")
        print("-" * 40)
        
        template_fields = processor._get_form_template(target_form['id'], target_form['name'])
        
        if template_fields:
            print(f"‚úÖ Template ready with {len(template_fields)} fields")
            
            # Look for districtproperty field
            district_field = None
            for field in template_fields:
                if field['label'].lower() == 'districtproperty':
                    district_field = field
                    break
            
            if district_field:
                print(f"üè¢ Found districtproperty field: {district_field['label']} ({district_field['type']})")
            else:
                print(f"‚ö†Ô∏è No districtproperty field found in template")
        else:
            print("‚ùå Could not extract template")
            return
        
        # Step 3: Test classification search
        print(f"\n3Ô∏è‚É£ TESTING CLASSIFICATION SETS")
        print("-" * 40)
        
        classification_sets = processor.api_client.get_classification_sets()
        lmh_set = None
        for cls_set in classification_sets:
            if cls_set.get('name', '').upper() == 'LMH':
                lmh_set = cls_set
                break
        
        if lmh_set:
            print(f"‚úÖ Found LMH classification set")
            items = lmh_set.get('items', [])
            print(f"   Available branches: {[item.get('label', 'Unknown') for item in items]}")
        else:
            print(f"‚ö†Ô∏è No LMH classification set found")
        
        # Step 4: Simulate the districtproperty workflow
        print(f"\n4Ô∏è‚É£ SIMULATING DISTRICTPROPERTY WORKFLOW")
        print("-" * 40)
        
        test_folder = "Bayview_Hills_District_ReplaceandRepair_20250822_143702"
        print(f"Test folder: {test_folder}")
        
        # This would normally be called during CSV transformation
        print(f"üîç Classification search process:")
        print(f"   1. Extract 'bayview hills district' from folder name")
        print(f"   2. Search classification sets for matches")
        print(f"   3. If no exact match:")
        print(f"      ‚Üí Show LMH branches (NAVY, MARINES)")
        print(f"      ‚Üí User selects branch")
        print(f"      ‚Üí User enters district name")
        print(f"      ‚Üí Format as 'NAVY,Bayview Hills District'")
        
        # Step 5: Show the complete workflow
        print(f"\n5Ô∏è‚É£ COMPLETE WORKFLOW SUMMARY")
        print("-" * 40)
        
        print(f"üìã When you export 'Bayview Hills District' data and migrate to")
        print(f"   'Liberty Military Housing - Master', the system will:")
        
        print(f"\nüîÑ FIELD MAPPING:")
        common_mappings = [
            ("Survey Date", "Survey Date"),
            ("Surveyed By", "Surveyed By"), 
            ("High Point", "High Point"),
            ("Low Point", "Low Point"),
            ("Before Photos", "Before Photos"),
            ("Address", "Address")
        ]
        
        for source, target in common_mappings:
            print(f"   ‚úÖ {source} ‚Üí {target}")
        
        print(f"\nüè¢ DISTRICTPROPERTY HANDLING:")
        print(f"   1. Search for 'bayview hills district' in classification sets")
        print(f"   2. No exact match found")
        print(f"   3. Show LMH branches: NAVY, MARINES")
        print(f"   4. User selects: NAVY")
        print(f"   5. User enters: Bayview Hills District")
        print(f"   6. Result: 'NAVY,Bayview Hills District' in every row")
        
        print(f"\nüìÅ OUTPUT STRUCTURE:")
        print(f"   PropertyFolder_20250822_143702/")
        print(f"   ‚îú‚îÄ‚îÄ Bayview_Hills_District_data.csv         # Original export")
        print(f"   ‚îú‚îÄ‚îÄ Liberty_Military_Housing_migrated.csv   # Mapped to target form")
        print(f"   ‚îî‚îÄ‚îÄ photos/                                 # All associated photos")
        print(f"       ‚îú‚îÄ‚îÄ photo_index.csv")
        print(f"       ‚îî‚îÄ‚îÄ *.jpg files")
        
        print(f"\nüéØ READY TO USE!")
        print(f"   Run: python fulcrum_processor.py")
        print(f"   Choose option 3: Filter and export")
        print(f"   When asked to migrate ‚Üí 'y'")
        print(f"   Search for 'liberty' ‚Üí Select form")
        print(f"   Choose 'auto' mapping ‚Üí Review if needed")
        print(f"   Classification search ‚Üí Select NAVY + district name")
        print(f"   Get perfectly formatted CSV for import!")
        
    except Exception as e:
        print(f"‚ùå Demo failed: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    demo_complete_migration()